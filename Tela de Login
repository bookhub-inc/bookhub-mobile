import 'package:bookhub/API.dart';
import 'package:bookhub/TeladeCadastro.dart';
import 'package:bookhub/models/usuario.dart';
import 'package:flutter/material.dart';
import 'main.dart';
import 'package:shared_preferences/shared_preferences.dart';


class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  @override

  TextEditingController usuarioController = TextEditingController();
  TextEditingController senhaController = TextEditingController();

  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    void _showDialog(String title, String body) {
      // flutter defined function
      showDialog(
        context: context,
        builder: (BuildContext context) {
          // return object of type Dialog
          return AlertDialog(
            title: new Text("${title}"),
            content: new Text("${body}"),
            actions: <Widget>[
              // usually buttons at the bottom of the dialog
              new FlatButton(
                child: new Text("OK"),
                onPressed: () {
                  Navigator.of(context).pop();
                },
              ),
            ],
          );
        },
      );
    }
    Future<bool> saveNamePreference(Usuario user) async {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      prefs.setString("nome", user.nome);
      return prefs.commit();
    }
    Future<bool> saveUserPreference(Usuario user) async {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      prefs.setString("login", user.login);
      return prefs.commit();
    }
    Future<bool> saveIdPreference(Usuario user) async {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      prefs.setInt("id", user.id);
      return prefs.commit();
    }
    Future<bool> saveSobrenomePreference(Usuario user) async {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      prefs.setString("sobrenome", user.sobrenome);
      return prefs.commit();
    }
    Future<bool> saveTelefonePreference(Usuario user) async {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      prefs.setString("sobrenome", user.sobrenome);
      return prefs.commit();
    }
    Future<bool> saveEmailPreference(Usuario user) async {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      prefs.setString("email", user.email);
      return prefs.commit();
    }
    Future<bool> saveIdAvatarPreference(Usuario user) async {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      prefs.setInt("idAvatar", user.idAvatar);
      return prefs.commit();
    }


    void logadoUser(Usuario nomeUser) {
      saveNamePreference(nomeUser).then((bool committed) {
        saveIdPreference(nomeUser).then((bool committed) {
          saveUserPreference(nomeUser).then((bool committed) {
            saveSobrenomePreference(nomeUser).then((bool committed) {
              saveEmailPreference(nomeUser).then((bool committed) {
                saveIdAvatarPreference(nomeUser).then((bool committed) {
                  Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => Home()));
                }
                );
              }
              );
            }
            );
          }
          );
        }
        );
      }
      );
    }

    bool _isLoading = false;
    return Scaffold( //função para material basico de design
        body: Container(
            padding: EdgeInsets.only(top: 30, left: 30, right: 30,),
            //defindo margem
            color: Color(0xff2A236E),
            child: _isLoading
                ? CircularProgressIndicator()
                : Form(
              key: _formKey,
              child: ListView(
                children: <Widget>[
                  Text(
                    "Bem vindo ao Bookhub",
                    textAlign: TextAlign.center,
                    style: TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        fontFamily: 'Tahoma'
                    ),
                  ),
                  SizedBox(
                    height: 60, //espaçamento entre o texto e imagem
                  ),
                  SizedBox( //criando side box
                    width: 150, //definindo tamnho da imagem dentro do container
                    height: 150,
                    child: Image.network(
                        "https://i.imgur.com/V2CfTHR.png"), //criando filho com a imagem em si
                  ),
                  SizedBox( //criando outra sized box para dar um espaço entre a imageme o campo de email e senha
                    height: 40,
                  ),
                  TextFormField( //criando campo
                    controller: usuarioController,
                    keyboardType: TextInputType.emailAddress,
                    //definindo o tipo email andresspara aparecer o @ no teclado
                    decoration: InputDecoration(
                      labelText: "Usuário",
                      labelStyle: TextStyle( //definindo fonte da label "caixinha de texto"
                        color: Colors.white,
                        fontWeight: FontWeight.w400, //grossura do texto
                        fontSize: 15,
                      ),
                    ),
                    style: TextStyle( //definindo fonte do texto de entreada
                      fontSize: 15,
                      color: Colors.white,
                    ),
                    validator: (text) {
                      if (text.isEmpty) {
                        return "Preencha o campo!";
                        return null;
                      }
                    },
                  ),
                  SizedBox(
                    height: 10,
                  ),
                  TextFormField(
                    controller: senhaController,
                    keyboardType: TextInputType.text,
                    obscureText: true,
                    decoration: InputDecoration(
                        labelText: "Senha",
                        labelStyle: TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w400, //grossura do texto
                          fontSize: 15,
                        )
                    ),
                    style: TextStyle( //definindo fonte do texto de entreada
                      fontSize: 20,
                      color: Colors.white,
                    ),
                    validator: (text) {
                      if (text.isEmpty || text.length < 6) {
                        return "Senha Inválida";
                      }
                    },
                  ),
                  SizedBox(
                    height: 100,
                  ),
                  Container( //container para botão de login
                    height: 60,
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                        gradient: LinearGradient( //definindo um degrade Linear
                          begin: Alignment.topLeft,
                          //aabaixo temos os parametros do degrade
                          end: Alignment.bottomRight,
                          stops: [0.1, 1],
                          colors: [
                            Color(0xff7A74D4),
                            Color(0xffedf1ff),
                          ],

                        ),
                        borderRadius: BorderRadius.all( //dando formato ao botão
                          Radius.circular(30),
                        )
                    ),
                    child: SizedBox.expand(
                      child: FlatButton(
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: <Widget>[
                              Text("Entrar",
                                textAlign: TextAlign.center,
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                  fontSize: 20,
                                ),
                              ),

                            ],
                          ),


                          onPressed: () async {

                            if (_formKey.currentState.validate()) {
                              setState(() => _isLoading = true);
                              final users = await ApiService.getUsersList();
                              setState(() => _isLoading = false);
                              final user = users.where((u) =>
                              u['login'] == usuarioController.text &&
                                  u['senha'] == senhaController.text).first;

                              Usuario userLogado = Usuario.fromJson(user);
                              logadoUser(userLogado);

                            } else {
                              Scaffold.of(context).showSnackBar(
                                  SnackBar(content: Text("Wrong email or")));
                            }; //definir para onde vai!!!!
                          }),
                    ),
                  ),
                  SizedBox(
                    height: 20,
                  ),
                  Container( //criando container para criação do botão de reset
                    height: 40,
                    alignment: Alignment.center,
                    child: FlatButton(
                      child: Text(
                        "Ainda não é cadastrado, Clique aqui",
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          color: Colors.white,
                        ),
                      ),
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) => TelaCadastro()),
                        );
                      }, //definir para onde vai!!!!
                    ),
                  ),
                ],
              ),
            )
        )
    );
  }


}
