import 'package:Bookhub/api.dart';
import 'package:flutter/material.dart';
import 'package:Bookhub/newPost.dart';
import 'package:shared_preferences/shared_preferences.dart';
import "package:Bookhub/cadastrolivros.dart";
import "package:Bookhub/drawertile.dart";
import "package:Bookhub/login.dart";
import 'package:Bookhub/estante.dart';
import 'package:Bookhub/tela_perfil.dart';
import 'package:Bookhub/main.dart';
import 'package:Bookhub/loja.dart';
import 'package:Bookhub/models/usuario.dart';

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "Post de dados",
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
    );
  }
}

class Topicos extends StatefulWidget {
  @override
  _TopicosState createState() => _TopicosState();
}

class _TopicosState extends State<Topicos> {
  bool _isLoading = false;
  bool _isChecked = true;
  bool Spoiler;
  String _nome = "";
  String _sobrenome = "";
  String _user = "";
  String _email = "";
  int _id;
  int _idAvatar;

  @override
  Future<String> getNamePreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String name = prefs.getString("nome");
    return name;
  }

  Future<String> getSobrenomePreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String sobrenome = prefs.getString("sobrenome");
    return sobrenome;
  }

  Future<String> getUserPreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String user = prefs.getString("login");
    return user;
  }

  Future<String> getEmailPreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String email = prefs.getString("email");
    return email;
  }

  Future<int> getIdPreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    int id = prefs.getInt("id");
    return id;
  }

  Future<int> getIdAvatarPreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    int idAvatar = prefs.getInt("idAvatar");
    return idAvatar;
  }

  void initState() {
    getNamePreference().then(updateName);
    getSobrenomePreference().then(updateSobrenome);
    getUserPreference().then(updateUser);
    getIdPreference().then(updateId);
    getIdAvatarPreference().then(updateAvatar);
    getEmailPreference().then(updateEmail);
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    IconButton iconBottom(IconData simbolo, Widget page) {
      return IconButton(
        icon: Icon(simbolo),
        color: Colors.white,
        onPressed: () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => page),
          );
        },
      );
    }

    _buildDrawerBack() => Container(
          //criando uma função e dando o nome de build Drawer Back
          decoration: BoxDecoration(
              //dentro de um container eu defino um boxdecoration
              gradient: LinearGradient(
            //em seguida um gradiente linear
            colors: [
              Color(0xff2A236E),
              Color(0xff836FFF), //definindo cores em hexadecimal
            ],
            begin: Alignment.topLeft, //definindo onde começa
            end: Alignment.bottomRight, //definindo onde termina
          )),
        );
    return Scaffold(
      floatingActionButton: FloatingActionButton(
        backgroundColor: Color(0xff2A236E),
        child: Icon(Icons.add_circle),
        onPressed: () {
          Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => NewPost(),
              ));
        },
      ),
      appBar: AppBar(
        title: Text("Bookhub"),
        backgroundColor: Color(0xff2A236E),
        actions: <Widget>[
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: () {
              initState();
            },
          ),
        ],
      ),
      drawer: Drawer(
        //criando a classe drawer
        child: Stack(
          //como o filho um stack para aparecer por cima da home tab
          children: <Widget>[
            _buildDrawerBack(), //chamando a função dentro do widget
            ListView(
              // criando listview para exibição de itens
              padding: EdgeInsets.only(left: 32.0, top: 0.0),
              //definindo espaçamento na borda a esquerda e no top do drawer
              children: <Widget>[
                Container(
                  margin: EdgeInsets.only(bottom: 0.0),
                  //definindo espaçamento entre o próximo conteudo listado
                  padding: EdgeInsets.fromLTRB(0.0, 8.0, 16.0, 0.0),
                  //defindo margens dentro do container
                  height: 250.0,
                  child: Stack(
                    // criando um stack para que o texto exibido venha por cima do container caso futurammente precise colocar algo no container
                    children: <Widget>[
                      DrawerHeader(
                        child: Container(
                          alignment: Alignment.center,
                          child: Column(
                            children: <Widget>[
                              Container(
                                width: 120,
                                height: 120,
                                decoration: BoxDecoration(
                                  color: Colors.blue,
                                  boxShadow: [
                                    BoxShadow(
                                      color: Color(0xff2A236E),
                                      blurRadius: 20,
                                      offset: Offset(0, 0),
                                    ),
                                  ],
                                  shape: BoxShape.circle,
                                  image: DecorationImage(
                                    fit: BoxFit.cover,
                                    image: NetworkImage(avatar(_idAvatar)),
                                  ),
                                ),
                              )
                            ],
                          ),
                        ),
                      ),
                      Container(
                        padding: EdgeInsets.only(
                          top: 165,
                          left: 50,
                          right: 30,
                        ), //defindo margem
                        child: Column(
                          children: <Widget>[
                            Text(
                              '${_nome} ${_sobrenome}',
                              style: TextStyle(
                                  fontSize: 20.0,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white),
                            ),
                            Text(
                              "@${_user}",
                              style: TextStyle(
                                  fontSize: 15.0, color: Colors.white),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                Container(
                    padding: EdgeInsets.only(
                      top: 0,
                      left: 0,
                      right: 30,
                    ),
                    //defindo margem
                    child: Column(
                      children: <Widget>[
                        DrawerTile(
                            Icons.book, "Cadastro de Livros", CadastroLivros()),
                        DrawerTile(Icons.chat, "Chat", LoginScreen()),
                        //defindo os icones ddo drawer
                        DrawerTile(
                            Icons.settings, "Configuração", LoginScreen()),
                        DrawerTile(Icons.help, "Ajuda", LoginScreen()),
                        DrawerExit(Icons.exit_to_app, "Sair", 1),
                      ],
                    )),
              ],
            )
          ],
        ),
      ),
      bottomNavigationBar: BottomAppBar(
        color: Color(0xff2A236E),
        child: new Row(
          mainAxisSize: MainAxisSize.max,
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: <Widget>[
            iconBottom(Icons.person, TelaPerfil()),
            iconBottom(Icons.bookmark_border, Estante()),
            iconBottom(Icons.menu, Home()),
            iconBottom(Icons.location_on, Loja()),
            iconBottom(Icons.toc, Topicos()),
          ],
        ),
      ),
      backgroundColor: Colors.white,
      body: FutureBuilder(
          future: ApiService.getPostList(),
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.done) {
              final posts = snapshot.data;
              return ListView.separated(
                separatorBuilder: (context, index) {
                  return Divider(
                    height: 2,
                    color: Colors.black,
                  );
                },
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(
                      posts[index]['titulo'],
                      style: TextStyle(
                          color: Colors.black, fontWeight: FontWeight.bold),
                    ),
                    subtitle: Text('Postado por @${posts[index]['login']}'),
                    onTap: () {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => Posts(posts[index]['id']),
                          ));
                    },
                  );
                },
                itemCount: posts.length,
              );
            }

            return Center(
              child: CircularProgressIndicator(),
            );
          }),
    );
  }

  void updateName(String nome) {
    setState(() {
      this._nome = nome;
    });
  }

  void updateSobrenome(String sobrenome) {
    setState(() {
      this._sobrenome = sobrenome;
    });
  }

  void updateUser(String user) {
    setState(() {
      this._user = user;
    });
  }

  void updateEmail(String email) {
    setState(() {
      this._email = email;
    });
  }

  void updateId(int id) {
    setState(() {
      this._id = id;
    });
  }

  void updateAvatar(int idAvatar) {
    setState(() {
      this._idAvatar = idAvatar;
    });
  }
}

class Posts extends StatefulWidget {
  @override
  final int _id;

  Posts(this._id);

  _PostsState createState() => _PostsState(_id);
}

class _PostsState extends State<Posts> {
  final int _id;

  _PostsState(this._id);

  bool Spoiler;
  String _nome = "";
  String _sobrenome = "";
  String _user = "";
  int _idAvatar;
  int _idUser;

  @override
  TextEditingController comentarioController = TextEditingController();

  Future<String> getNamePreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String name = prefs.getString("nome");
    return name;
  }

  Future<String> getSobrenomePreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String sobrenome = prefs.getString("sobrenome");
    return sobrenome;
  }

  Future<String> getUserPreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String user = prefs.getString("login");
    return user;
  }

  Future<int> getIdAvatarPreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    int idAvatar = prefs.getInt("idAvatar");
    return idAvatar;
  }

  Future<int> getIdUserPreference() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    int idUser = prefs.getInt("id");
    return idUser;
  }

  void initState() {
    getNamePreference().then(updateName);
    getSobrenomePreference().then(updateSobrenome);
    getUserPreference().then(updateUser);
    getIdAvatarPreference().then(updateAvatar);
    getIdUserPreference().then(updateIdUser);
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Tópico"),
        backgroundColor: Color(0xff2A236E),
        actions: <Widget>[
          IconButton(
            icon: Icon(Icons.chat_bubble),
            onPressed: () {
              comentarioController.text = "";
              showDialog(
                  context: context,
                  builder: (BuildContext context) {
                    // return object of type Dialog
                    return Container(
                      height: 10.0,
                      child: AlertDialog(
                        title: new Text('Faça um comentário'),
                        content: SingleChildScrollView(
                            child: Container(
                                height: 100.0,
                                child:
                                TextField(
                                  controller: comentarioController,
                                  maxLines: 10,
                                  decoration: InputDecoration(
                                      hintText: 'Comente neste tópico'
                                  ),
                                )
                            )
                        ),
                        actions: <Widget>[
                          Row(
                            children: <Widget>[
                              IconButton(
                                  icon: Icon(Icons.send),
                                  color: Colors.blue,
                                  onPressed: () {
                                    if (comentarioController.text.isEmpty) {
                                      return showDialog(
                                        context: context,
                                        builder: (BuildContext context) {
                                          // return object of type Dialog
                                          return AlertDialog(
                                            title: new Text('Campo vazio'),
                                            content: new Text(
                                                'Não poderá enviar comentários vazios. Por favor argumente!'),
                                            actions: <Widget>[
                                              // usually buttons at the bottom of the dialog
                                              new FlatButton(
                                                child: new Text("OK"),
                                                onPressed: () {
                                                  Navigator.pop(context);
                                                },
                                              ),
                                            ],
                                          );
                                        },
                                      );
                                    } else {
                                      ApiService.addCommentsForPost(
                                          _id, comentarioController.text, _idUser);
                                      showDialog(
                                        context: context,
                                        builder: (BuildContext context) {
                                          // return object of type Dialog
                                          return AlertDialog(
                                            title: new Text('Comentário postado!'),
                                            content: new Text(
                                                'Atenção! Em caso de má conduta, poderá ser punido.'),
                                            actions: <Widget>[
                                              // usually buttons at the bottom of the dialog
                                              new FlatButton(
                                                child: new Text("OK"),
                                                onPressed: () {
                                                  Navigator.pop(context);
                                                  Navigator.pop(context);
                                                },
                                              ),
                                            ],
                                          );
                                        },
                                      );
                                    };
                                  }
                                  ),
                            ],
                          )
                        ],
                      ),
                    );
                  }
              );
            },
          )
        ],
      ),
      body: Column(
        children: <Widget>[
          SingleChildScrollView(
            child:
          Padding(
            padding: EdgeInsets.all(10.0),
            child: FutureBuilder(
                  future: ApiService.getPost(_id),
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.done) {
                      int idTopico = snapshot.data['id'];
                      if (_user == snapshot.data['login']) {
                        return Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: <Widget>[
                            Row(
                              children: <Widget>[
                                Container(
                                  width:60,
                                  height:60,
                                  decoration: BoxDecoration(
                                    color: Colors.blue,
                                    boxShadow: [BoxShadow(
                                      color: Color(0xff2A236E),
                                      blurRadius: 20,
                                      offset: Offset(0, 0),
                                    ),
                                    ],
                                    shape: BoxShape.circle,
                                    image: DecorationImage(
                                      fit: BoxFit.cover,
                                      image: NetworkImage (avatar(_idAvatar)),
                                    ),
                                  ),

                                ),
                            SizedBox(
                              height: 10,
                            ),
                            Text(
                              snapshot.data['titulo'],
                              style: TextStyle(
                                fontSize: 30,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                              ],
                    ),
                            SizedBox(
                              height: 10,
                            ),
                            Text(snapshot.data['descricao'],
                                style: TextStyle(
                                  fontSize: 16,
                                )),
                            SizedBox(
                              height: 10,
                            ),
                            Text(
                                'Tópico postado por usuário: @${snapshot.data['login']} ás ${snapshot.data['dataCriacao']}'),
                            OutlineButton(
                              onPressed: () {
                                TextEditingController tituloController =
                                    TextEditingController();
                                TextEditingController descricaoController =
                                    TextEditingController();
                                showDialog(
                                  context: context,
                                  builder: (BuildContext context) {
                                    // return object of type Dialog
                                    return Container(
                                      height: 10.0,
                                      child: AlertDialog(
                                        title: new Text('Alterar tópico'),
                                        content: SingleChildScrollView(
                                          child: Column(
                                            children: <Widget>[
                                              Text('Título do tópico'),
                                              TextField(
                                                controller: tituloController,
                                                decoration: InputDecoration(
                                                  border: InputBorder.none,
                                                  hintText:
                                                      "${snapshot.data['titulo']}",
                                                  hintMaxLines: 4,
                                                ),
                                              ),
                                              Text('Corpo do tópico'),
                                              SizedBox(
                                                height: 5,
                                              ),
                                              Container(
                                                height: 200.0,
                                                child: TextField(
                                                  controller:
                                                      descricaoController,
                                                  decoration: InputDecoration(
                                                    border: InputBorder.none,
                                                    hintText:
                                                        "${snapshot.data['descricao']}",
                                                    hintMaxLines: 20,
                                                  ),
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                        actions: <Widget>[
                                          // usually buttons at the bottom of the dialog
                                          Row(
                                            children: <Widget>[
                                              FlatButton(
                                                child: new Text("Cancelar"),
                                                onPressed: () {
                                                  Navigator.pop(context);
                                                },
                                              ),
                                              FlatButton(
                                                child: new Text("Ok"),
                                                onPressed: () {
                                                  if (tituloController
                                                      .text.isEmpty) {
                                                    tituloController.text =
                                                        snapshot.data['titulo'];
                                                  } else if (descricaoController
                                                      .text.isEmpty) {
                                                    descricaoController.text =
                                                        snapshot
                                                            .data['descricao'];
                                                  }
                                                  if (tituloController
                                                          .text.isNotEmpty &&
                                                      descricaoController
                                                          .text.isNotEmpty) {
                                                    ApiService.alterPost(
                                                        tituloController.text,
                                                        descricaoController
                                                            .text,
                                                        idTopico);
                                                    Navigator.pop(context);
                                                  }
                                                },
                                              ),
                                            ],
                                          ),
                                        ],
                                      ),
                                    );
                                  },
                                );
                              },
                              child: Text("Alterar tópico"),
                              borderSide: BorderSide(color: Colors.blue),
                              shape: StadiumBorder(),
                            ),
                          ],
                        );
                      } else {
                        return SingleChildScrollView(
                            child: Column(
                          crossAxisAlignment: CrossAxisAlignment.stretch,
                          children: <Widget>[
                            Row(
                              children: <Widget>[
                                Container(
                                  width:60,
                                  height:60,
                                  decoration: BoxDecoration(
                                    color: Colors.blue,
                                    shape: BoxShape.circle,
                                    image: DecorationImage(
                                      fit: BoxFit.cover,
                                      image: NetworkImage (avatar(_idAvatar)),
                                    ),
                                  ),

                                ),
                                SizedBox(
                                  height: 10,
                                ),
                                Expanded(
                                  child:
                                      Padding(
                                        padding: EdgeInsets.all(10),
                                child:
                                Text(
                                  snapshot.data['titulo'],
                                  style: TextStyle(
                                    fontSize: 30,
                                    fontWeight: FontWeight.bold,
                                  ),
                                )
                                      )
                                ),
                              ],
                            ),
                            SizedBox(
                              height: 10,
                            ),
                            Text(snapshot.data['descricao'],
                                style: TextStyle(
                                  fontSize: 16,
                                )),
                            SizedBox(
                              height: 10,
                            ),
                            Text(
                                'Tópico postado por usuário: @${snapshot.data['login']} ás ${snapshot.data['dataCriacao']}'),
                          ],
                            ),
                        );
                      }
                    }
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }),
            ),
          ),
          Container(
            height: 20,
          ),
          Divider(
            color: Colors.black,
            height: 3,
          ),
          Container(
            height: 20,
            child: Text("Comentários"),
          ),
    FutureBuilder(
    future: ApiService.getCommentsForPost(_id),
    builder: (context, snapshot) {
    if (snapshot.connectionState == ConnectionState.done) {
    final comments = snapshot.data;
    return Expanded(
    child: ListView.separated(
    separatorBuilder: (context, index) => Divider(
    height: 2,
    color: Colors.black,
    ),
    itemBuilder: (context, index) {
    return Column(
    children: <Widget>[
    ListTile(
    title: Text(
    '@${comments[index]['login']}',
    style: TextStyle(
    color: Colors.black,
    fontWeight: FontWeight.bold),
    ),
    subtitle: Text(comments[index]['comentario'], style: TextStyle(fontSize: 15, color: Colors.black)),
    leading: Container(
      width:60,
      height:60,
      decoration: BoxDecoration(
      color: Colors.blue,
      boxShadow: [BoxShadow(
      color: Color(0xff2A236E),
      blurRadius: 20,
      offset: Offset(0, 0),
      ),
      ],
      shape: BoxShape.circle,
      image: DecorationImage(
      fit: BoxFit.cover,
      image: NetworkImage (avatar(_idAvatar)),
      ),
      ),

      ),
    onLongPress: (){

    },
    ),
    Text(
    "Comentário postado ás ${comments[index]['dataComentario']}"),
    ],
    );

    },
    itemCount: comments.length,
    ),
    );
    }
    return Center(
    child: CircularProgressIndicator(),
    );
    },
    ),
    ],
      ),
    );
  }

  void updateName(String nome) {
    setState(() {
      this._nome = nome;
    });
  }

  void updateIdUser(int idUser) {
    setState(() {
      this._idUser = idUser;
    });
  }

  void updateSobrenome(String sobrenome) {
    setState(() {
      this._sobrenome = sobrenome;
    });
  }

  void updateUser(String user) {
    setState(() {
      this._user = user;
    });
  }

  void updateAvatar(int idAvatar) {
    setState(() {
      this._idAvatar = idAvatar;
    });
  }
}
